name: Version and Publish

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]

jobs:
  validate:
    if: github.event_name == 'pull_request' && (startsWith(github.event.pull_request.head.ref, 'major/') || startsWith(github.event.pull_request.head.ref, 'minor/') || startsWith(github.event.pull_request.head.ref, 'patch/'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

      - name: Run build
        run: pnpm build

      - name: Validate version branch
        run: |
          echo "‚úÖ Version branch validation passed"
          if [[ "${{ github.event.pull_request.head.ref }}" =~ ^major/ ]]; then
            echo "üöÄ This will create a MAJOR release when merged"
          elif [[ "${{ github.event.pull_request.head.ref }}" =~ ^minor/ ]]; then
            echo "‚ú® This will create a MINOR release when merged"
          else
            echo "üêõ This will create a PATCH release when merged"
          fi

  version-and-publish:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      new-version: ${{ steps.version-bump.outputs.new-version }}
      current-version: ${{ steps.version-bump.outputs.current-version }}
      version-type: ${{ steps.version-type.outputs.type }}
      package-name: ${{ steps.prerequisites.outputs.package-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Get pnpm store directory
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Validate prerequisites and setup
        id: prerequisites
        run: |
          # Extract package info
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          echo "package-name=$PACKAGE_NAME" >> $GITHUB_OUTPUT
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          echo "üì¶ Package: $PACKAGE_NAME"
          echo "üìå Current Version: $CURRENT_VERSION"

          # Validate Node.js version matches package.json engines
          NODE_VERSION=$(node --version)
          echo "üîç Validating Node.js version: $NODE_VERSION"

          # Basic validation - check if we're on Node 20+
          if ! echo "$NODE_VERSION" | grep -qE "^v(20|21|22)\."; then
            echo "‚ö†Ô∏è  WARNING: Node.js version $NODE_VERSION may not match package.json engines requirements"
          fi

          echo "‚úÖ Prerequisites validation complete"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm test

      - name: Run build
        run: pnpm build

      - name: Determine version bump type
        id: version-type
        run: |
          if [[ "${{ github.event.pull_request.head.ref }}" =~ ^major/ ]]; then
            echo "type=major" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.pull_request.head.ref }}" =~ ^minor/ ]]; then
            echo "type=minor" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.pull_request.head.ref }}" =~ ^patch/ ]]; then
            echo "type=patch" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            # Default to patch for direct pushes to main
            echo "type=patch" >> $GITHUB_OUTPUT
          else
            echo "type=none" >> $GITHUB_OUTPUT
          fi

      - name: Configure git
        if: steps.version-type.outputs.type != 'none'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Generate changelog with Claude
        if: steps.version-type.outputs.type != 'none'
        id: changelog
        run: |
          # Get commits since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --oneline --no-merges --since="1 week ago" || echo "No recent commits")
          else
            COMMITS=$(git log --oneline --no-merges ${LAST_TAG}..HEAD || echo "No new commits")
          fi

          # Generate changelog using Claude (fail if it fails)
          if ! command -v claude-code >/dev/null 2>&1; then
            echo "‚ùå ERROR: Claude CLI not found. Please ensure Claude Code is properly installed."
            exit 1
          fi

          echo "ü§ñ Generating changelog with Claude..."
          CHANGELOG=$(timeout 240s claude-code << 'CLAUDE_EOF'
          Please analyze the following git commits and generate a concise changelog in this exact format:

          ## Changes

          ### üöÄ Features
          - Brief description of new features

          ### üêõ Bug Fixes
          - Brief description of bug fixes

          ### üîß Improvements
          - Brief description of improvements/refactoring

          ### üìö Documentation
          - Brief description of documentation changes

          ### ‚ö° Performance
          - Brief description of performance improvements

          Only include sections that have actual changes. Keep each bullet point concise and user-focused.

          Git commits to analyze:
          $COMMITS
          CLAUDE_EOF
          )

          # Check if changelog generation succeeded
          if [ $? -ne 0 ] || [ -z "$CHANGELOG" ]; then
            echo "‚ùå ERROR: Failed to generate changelog with Claude. Workflow cannot continue."
            echo "Debug info - Commits to analyze:"
            echo "$COMMITS"
            exit 1
          fi

          echo "‚úÖ Successfully generated changelog with Claude"

          # Save changelog to output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create version bump script
        if: steps.version-type.outputs.type != 'none'
        run: |
          # Create Node.js script to safely bump version
          cat > bump-version.js << 'VERSION_SCRIPT_EOF'
          const fs = require('fs');
          const path = require('path');

          const versionType = process.argv[2];
          const packagePath = path.join(process.cwd(), 'package.json');

          try {
            const packageJson = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
            const currentVersion = packageJson.version;
            const [major, minor, patch] = currentVersion.split('.').map(Number);

            let newVersion;
            switch (versionType) {
              case 'major':
                newVersion = `${major + 1}.0.0`;
                break;
              case 'minor':
                newVersion = `${major}.${minor + 1}.0`;
                break;
              case 'patch':
                newVersion = `${major}.${minor}.${patch + 1}`;
                break;
              default:
                throw new Error(`Invalid version type: ${versionType}`);
            }

            packageJson.version = newVersion;
            fs.writeFileSync(packagePath, JSON.stringify(packageJson, null, 2) + '\n');

            console.log(`${currentVersion}:${newVersion}`);
          } catch (error) {
            console.error('Error bumping version:', error.message);
            process.exit(1);
          }
          VERSION_SCRIPT_EOF

      - name: Create single atomic commit with all changes
        if: steps.version-type.outputs.type != 'none'
        id: version-bump
        run: |
          # Extract version type for commit title
          VERSION_TYPE="${{ steps.version-type.outputs.type }}"

          # Create clean commit message title
          if [ "$VERSION_TYPE" = "major" ]; then
            COMMIT_TITLE="üöÄ Major Release"
          elif [ "$VERSION_TYPE" = "minor" ]; then
            COMMIT_TITLE="‚ú® Minor Release"
          else
            COMMIT_TITLE="üêõ Patch Release"
          fi

          # Get the safe base commit (last release tag or fallback)
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            BASE_COMMIT=$(git rev-list -n 1 $LAST_TAG)
          else
            # Fallback: get commit from 1 week ago or first commit
            BASE_COMMIT=$(git rev-list --since="1 week ago" --reverse HEAD | head -1 || git rev-list --max-parents=0 HEAD)
          fi

          echo "Base commit for squash: $BASE_COMMIT"

          # Safely reset to base (soft reset preserves working directory)
          git reset --soft $BASE_COMMIT

          # Bump version using our safe Node.js script
          VERSION_OUTPUT=$(node bump-version.js $VERSION_TYPE)
          CURRENT_VERSION=$(echo $VERSION_OUTPUT | cut -d: -f1)
          NEW_VERSION=$(echo $VERSION_OUTPUT | cut -d: -f2)

          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Synchronize pnpm lockfile if it exists
          if [ -f pnpm-lock.yaml ]; then
            echo "Synchronizing pnpm lockfile..."
            pnpm install --frozen-lockfile --ignore-scripts || echo "Lockfile sync completed with warnings"
          fi

          # Create single atomic commit with everything
          git add -A
          COMMIT_MSG="$COMMIT_TITLE

          ${{ steps.changelog.outputs.changelog }}"

          git commit -m "$COMMIT_MSG" || {
            echo "Commit failed, checking git status:"
            git status
            git diff --cached
            exit 1
          }

          # Create git tag
          git tag -a "v$NEW_VERSION" -m "Version $NEW_VERSION

          ${{ steps.changelog.outputs.changelog }}"

          echo "Created single atomic commit with version $CURRENT_VERSION ‚Üí $NEW_VERSION"

          # Clean up temporary files
          rm -f bump-version.js

      - name: Push version changes safely
        if: steps.version-type.outputs.type != 'none'
        run: |
          # Check if we need to force push (if git history was rewritten)
          CURRENT_REMOTE_HEAD=$(git ls-remote origin main | cut -f1)
          LOCAL_REMOTE_HEAD=$(git rev-parse origin/main)

          if [ "$CURRENT_REMOTE_HEAD" != "$LOCAL_REMOTE_HEAD" ]; then
            echo "‚ö†Ô∏è  Remote main has been updated by another process"
            echo "Current remote HEAD: $CURRENT_REMOTE_HEAD"
            echo "Local remote HEAD: $LOCAL_REMOTE_HEAD"
            echo "‚ùå ABORTING: Cannot safely force push. Another workflow may be running."
            exit 1
          fi

          # Safe force push with lease (only if remote hasn't changed)
          echo "üöÄ Pushing squashed commit to main..."
          git push --force-with-lease origin main || {
            echo "‚ùå ERROR: Force push failed. This likely means:"
            echo "1. Another workflow pushed to main after this one started"
            echo "2. Branch protection rules are preventing the push"
            echo "3. Insufficient permissions"
            exit 1
          }

          echo "üè∑Ô∏è  Pushing tags..."
          git push origin --tags

      - name: Publish to NPM
        if: steps.version-type.outputs.type != 'none'
        run: pnpm publish --access public --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.version-type.outputs.type != 'none'
        run: |
          gh release create "v${{ steps.version-bump.outputs.new-version }}" \
            --title "Release v${{ steps.version-bump.outputs.new-version }}" \
            --notes "# Release v${{ steps.version-bump.outputs.new-version }}

          ${{ steps.changelog.outputs.changelog }}

          ---

          **Version Info**: ${{ steps.version-type.outputs.type }} release (v${{ steps.version-bump.outputs.current-version }} ‚Üí v${{ steps.version-bump.outputs.new-version }})

          ### Installation

          \`\`\`bash
          npm install ${{ steps.prerequisites.outputs.package-name }}@${{ steps.version-bump.outputs.new-version }}
          \`\`\`

          ### Documentation

          See the [README](https://github.com/${{ github.repository }}#readme) for usage instructions and full documentation."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify-success:
    if: github.event_name == 'push'
    needs: version-and-publish
    runs-on: ubuntu-latest
    steps:
      - name: Success notification
        if: needs.version-and-publish.outputs.new-version != ''
        run: |
          echo "üéâ Successfully published version ${{ needs.version-and-publish.outputs.new-version }} to NPM!"
          echo "üì¶ Package: https://www.npmjs.com/package/${{ needs.version-and-publish.outputs.package-name }}"
          echo "üè∑Ô∏è  GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.version-and-publish.outputs.new-version }}"
          echo "üîÑ Version Type: ${{ needs.version-and-publish.outputs.version-type }}"
          echo "üìà Version Change: v${{ needs.version-and-publish.outputs.current-version }} ‚Üí v${{ needs.version-and-publish.outputs.new-version }}"